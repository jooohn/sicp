(define (smallest-divisor n) (find-divisor n 2))

(define (find-divisor n test-divisor)
    (cond   ((> (square test-divisor) n) n)
            ((divides? test-divisor n) test-divisor)
            (else (find-divisor n (+ test-divisor 1)))))

(define (divides? a b) (= (remainder b a) 0))

(define (prime? n) (= n (smallest-divisor n)))

(define (timed-prime-test n)
    (newline)
    (display n)
    (start-prime-test n (runtime)))

(define (start-prime-test n start-time)
    (if (prime? n)
        (report-prime (- (runtime) start-time))))

(define (report-prime elapsed-time)
    (display " *** ")
    (display elapsed-time))

(define (search-for-prime from to)
    (cond   ((> from to) 0)
            ((divides? 2 from) (search-for-prime (+ from 1) to))
            (else   (timed-prime-test from)
                    (search-for-prime (+ from 2) to))))

a > 1000
1009 *** 0.
1013 *** 0.
1019 *** 0.
