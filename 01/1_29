(define (cube x) (* x x x))
(define (sum term a next b)
    (if (> a b)
        0
        (+  (term a)
            (sum term (next a) next b))))
(define (integral f a b dx)
    (define (add-dx x)
        (+ x dx))
    (* (sum f (+ a (/ dx 2.0)) add-dx b) dx))

(define (sympthon f a b n)
    (define h (/ (- b a) n))
    (define (y k) (f (+ a (* k h))))
    (define (func num)
        (cond   ((= num 0) (y 0))
                ((= num n) (y n))
                ((= (remainder num 2) 0) (* 2 (y num)))
                (else (* 4 (y num)))))
    (define (next num) (+ num 1))
    (* (/ h 3) (sum func 0 next n)))
