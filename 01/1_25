(define (fast-expt b n)
    (define (even? n) (= (remainder n 2) 0))
    (define (fast-expt-iter b n a)
        (cond   ((= n 0) a)
                ((even? n) (fast-expt-iter (square b) (/ n 2) a))
                (else (fast-expt-iter b (- n 1) (* a b)))))
    (fast-expt-iter b n 1))
(define (smallest-divisor n) (find-divisor n 2))
(define (find-divisor n test-divisor)
    (cond   ((> (square test-divisor) n) n)
            ((divides? test-divisor n) test-divisor)
            (else (find-divisor n (+ test-divisor 1)))))
(define (divides? a b) (= (remainder b a) 0))
(define (prime? n) (= n (smallest-divisor n)))
(define (timed-prime-test n)
    (newline)
    (display n)
    (start-prime-test n (runtime)))
(define (start-prime-test n start-time)
    (if (fast-prime? n 100)
        (report-prime (- (runtime) start-time))))
(define (report-prime elapsed-time)
    (display " *** ")
    (display elapsed-time))
(define (expmod base exp m)
    (remainder (fast-expt base exp) m))
(define (fermat-test n)
    (define (try-it a)
        (= (expmod a n n) a))
    (try-it (+ 1 (random (- n 1)))))
(define (fast-prime? n times)
    (cond ((= times 0) true)
    ((fermat-test n) (fast-prime? n (- times 1)))
    (else false)))

帰ってこない
